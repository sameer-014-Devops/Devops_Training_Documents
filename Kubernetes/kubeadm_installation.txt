  #Ports for master node
TCP - 6443, 2379-2380, 10250, 10259, 10257

  #Ports for works node
TCP - 10250, 10256, 30000-32767

  # Set hostname for Kubernetes master node
    
sudo hostnamectl set-hostname "kube-master"
exec bash  # Restart the shell to apply the hostname change

  # Set hostname for Kubernetes master node
    
sudo hostnamectl set-hostname "kube-worker-node01"
exec bash  # Restart the shell to apply the hostname change

  # Disable swap and update fstab
    
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

  # Install Docker
    
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get updater /etc/apt/keyrings/docker.asc

sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  # Load necessary kernel modules for containerd
    
sudo modprobe overlay 
sudo modprobe br_netfilter
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

  # Configure sysctl settings for Kubernetes networking
    
sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
sudo sysctl --system

  # Configure containerd
    
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml
sudo vi /etc/containerd/config.toml 
          #SystemdCgroup = true

  # Restart and check containerd status

sudo systemctl restart containerd
sudo systemctl status containerd

  # Install Kubernetes dependencies

sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl gpg

  # Add Kubernetes GPG key and repository
    
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

  # Update package list
    
sudo apt-get update

  # Install Kubernetes components
   
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

  # Enable kubelet service
    
sudo systemctl enable kubelet

  # Configure in master node only

sudo kubeadm config images pull

  #Initialize the cluster

sudo kubeadm init --pod-network-cidr=10.244.0.0/16
#sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem

  #To start using your cluster, you need to run the following as a regular user:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
export KUBECONFIG=/etc/kubernetes/admin.conf

  #Deploy a pod network to our cluster. This is required to interconnect the different Kubernetes components.

kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml
  
  # To generate New Token along with Kubeadm Join Command.

sudo kubeadm token create --print-join-command 

  # Configure in worker nodes only

kubeadm join <key-generated-in masternode>
